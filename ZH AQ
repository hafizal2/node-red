[
    {
        "id": "4247dea3b30db6da",
        "type": "tab",
        "label": "AQ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5517e021a5a13a88",
        "type": "function",
        "z": "4247dea3b30db6da",
        "name": "DHT22",
        "func": "// Function node code\nvar temperature = msg.payload.temperature;\nvar humidity = msg.payload.humidity;\nvar dewPoint = msg.payload.dew_point;\n\n// Create gauge chart messages for temperature, humidity, and dew point\nvar msgTemperature = {\n    topic: \"temperature\",\n    payload: temperature,\n    ui_control: { icon: \"fa-cloud\", title: \"Temperature\", order: 1, group: \"Temperature/Humidity/Dew Point\" },\n    ui_gauge: { min: 0, max: 50, value: temperature, format: \"{{value}} °C\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\nvar msgHumidity = {\n    topic: \"humidity\",\n    payload: humidity,\n    ui_control: { icon: \"fa-cloud\", title: \"Humidity\", order: 2, group: \"Temperature/Humidity/Dew Point\" },\n    ui_gauge: { min: 0, max: 100, value: humidity, format: \"{{value}} %\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\nvar msgDewPoint = {\n    topic: \"dew_point\",\n    payload: dewPoint,\n    ui_control: { icon: \"fa-cloud\", title: \"Dew Point\", order: 3, group: \"Temperature/Humidity/Dew Point\" },\n    ui_gauge: { min: 0, max: 50, value: dewPoint, format: \"{{value}} °C\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\n// Initialize or retrieve the accumulated values and count from flow context\ncontext.avgValues = context.avgValues || {\n    temperatureSum: 0,\n    humiditySum: 0,\n    dewPointSum: 0,\n    count: 0\n};\n\n// Update the accumulated values and count\ncontext.avgValues.temperatureSum += temperature;\ncontext.avgValues.humiditySum += humidity;\ncontext.avgValues.dewPointSum += dewPoint;\ncontext.avgValues.count++;\n\n// Calculate the average values\nvar averageTemperature = (context.avgValues.temperatureSum / context.avgValues.count).toFixed(2);\nvar averageHumidity = (context.avgValues.humiditySum / context.avgValues.count).toFixed(2);\nvar averageDewPoint = (context.avgValues.dewPointSum / context.avgValues.count).toFixed(2);\n\n// Create messages for average values\nvar msgAverageTemperature = {\n    payload: parseFloat(averageTemperature)\n};\n\nvar msgAverageHumidity = {\n    payload: parseFloat(averageHumidity)\n};\n\nvar msgAverageDewPoint = {\n    payload: parseFloat(averageDewPoint)\n};\n\n// Return the messages\nreturn [msgTemperature, msgHumidity, msgDewPoint, msgAverageTemperature, msgAverageHumidity, msgAverageDewPoint];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "6176ada736fcc92c",
                "70c74826aa65924d"
            ],
            [
                "e029353b408845bb",
                "fc7c23ad424c65a5"
            ],
            [],
            [
                "42a69191e6e67ccf"
            ],
            [
                "59e7f70606fe2c3b"
            ],
            []
        ]
    },
    {
        "id": "e029353b408845bb",
        "type": "ui_gauge",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "fed413095bcf78ad",
        "order": 3,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "b2952a922e4ca69b",
        "type": "mqtt in",
        "z": "4247dea3b30db6da",
        "name": "",
        "topic": "data/air",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29176215.6781b6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "5517e021a5a13a88",
                "6696f99c208d91d1",
                "cd112085c30327c8",
                "d67f317fcdb43c5f",
                "0823e1504139c512",
                "4e3a7002c255ae46"
            ]
        ]
    },
    {
        "id": "6696f99c208d91d1",
        "type": "debug",
        "z": "4247dea3b30db6da",
        "name": "msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "cd112085c30327c8",
        "type": "function",
        "z": "4247dea3b30db6da",
        "name": "SGP30",
        "func": "// Function node code\nvar TVOC = msg.payload.TVOC;\nvar eCO2 = msg.payload.eCO2;\n\n// Initialize or retrieve the accumulated values and count from flow context\ncontext.avgValues = context.avgValues || {\n    TVOCSum: 0,\n    eCO2Sum: 0,\n    count: 0\n};\n\n// Accumulate the sum of TVOC and eCO2 values\ncontext.avgValues.TVOCSum += TVOC;\ncontext.avgValues.eCO2Sum += eCO2;\ncontext.avgValues.count++;\n\n// Calculate the average values\nvar averageTVOC = context.avgValues.TVOCSum / context.avgValues.count;\nvar averageECO2 = context.avgValues.eCO2Sum / context.avgValues.count;\n\n// Create gauge chart messages for TVOC and eCO2\nvar msgTVOC = {\n    topic: \"TVOC\",\n    payload: TVOC,\n    ui_control: { icon: \"fa-cloud\", title: \"TVOC\", order: 1, group: \"TVOC/eCO2\" },\n    ui_gauge: { min: 0, max: 500, value: TVOC, format: \"{{value}} ppb\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\nvar msgECO2 = {\n    topic: \"eCO2\",\n    payload: eCO2,\n    ui_control: { icon: \"fa-cloud\", title: \"eCO2\", order: 2, group: \"TVOC/eCO2\" },\n    ui_gauge: { min: 400, max: 1000, value: eCO2, format: \"{{value}} ppm\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\n// Create messages for average values\nvar msgAverageTVOC = {\n    payload: averageTVOC.toFixed(2) // Format average TVOC to two decimal places\n};\n\nvar msgAverageECO2 = {\n    payload: averageECO2.toFixed(2) // Format average eCO2 to two decimal places\n};\n\n// Return the messages\nreturn [msgTVOC, msgECO2, msgAverageTVOC, msgAverageECO2];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "ba65c529d2ea0219",
                "488b23c5e98d5d52"
            ],
            [
                "cf88b5491e4b5a3f",
                "dbf172875ddc1bc0"
            ],
            [
                "d21ed13daa852dd0"
            ],
            [
                "c9267f1bcc1bdbd1"
            ]
        ]
    },
    {
        "id": "488b23c5e98d5d52",
        "type": "ui_gauge",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "85867ccc12822d96",
        "order": 3,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "TVOC",
        "label": "",
        "format": "{{value}} ppb",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "cf88b5491e4b5a3f",
        "type": "ui_gauge",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "3c09e0ee9ba3dbb5",
        "order": 3,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "eCO2",
        "label": "",
        "format": "{{value}} ppm",
        "min": "400",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "d67f317fcdb43c5f",
        "type": "function",
        "z": "4247dea3b30db6da",
        "name": "GP2Y",
        "func": "// Function node code\nvar dustDensity = msg.payload.dust_density;\n\n// Initialize or retrieve the accumulated values and count from flow context\ncontext.avgValues = context.avgValues || {\n    sum: 0,\n    count: 0\n};\n\n// Accumulate the sum of dust density values\ncontext.avgValues.sum += dustDensity;\ncontext.avgValues.count++;\n\n// Calculate the average dust density\nvar averageDustDensity = context.avgValues.sum / context.avgValues.count;\n\n// Create gauge chart message for dust density\nvar msgDustDensity = {\n    topic: \"dust_density\",\n    payload: dustDensity,\n    ui_control: { icon: \"fa-cloud\", title: \"Dust Density\", order: 6, group: \"Air Quality\" },\n    ui_gauge: { min: 0, max: 100, value: dustDensity, format: \"{{value}} ug/m3\", width: 4, height: 4, colors: [\"#00b500\", \"#e6e600\", \"#ca3838\"] }\n};\n\n// Create message for average dust density\nvar msgAverageDustDensity = {\n    payload: averageDustDensity.toFixed(2) // Format average dust density to two decimal places\n};\n\n// Return the gauge chart message and average message\nreturn [msgDustDensity, msgAverageDustDensity];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 560,
        "wires": [
            [
                "63b986250ea6c067",
                "a892e6621dbb10cc"
            ],
            [
                "04aacaa1545441f5"
            ]
        ]
    },
    {
        "id": "63b986250ea6c067",
        "type": "ui_gauge",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "356ff7c434b524f6",
        "order": 3,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Dust Density",
        "label": "",
        "format": "{{value}} µg/m3",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 810,
        "y": 560,
        "wires": []
    },
    {
        "id": "0823e1504139c512",
        "type": "function",
        "z": "4247dea3b30db6da",
        "name": "Date/Time",
        "func": "var readCurrent = new Date().getTime();\nmsg.payload = readCurrent;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 720,
        "wires": [
            [
                "5b5abcb3c5916ba1"
            ]
        ]
    },
    {
        "id": "5d278a877ae5a83d",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "356ff7c434b524f6",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Last Updated : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1060,
        "y": 740,
        "wires": []
    },
    {
        "id": "6176ada736fcc92c",
        "type": "ui_chart",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "64bd245e2e2a928f",
        "order": 5,
        "width": 7,
        "height": 4,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#fd7d0d",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fc7c23ad424c65a5",
        "type": "ui_chart",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "fed413095bcf78ad",
        "order": 5,
        "width": 7,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#fde917",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ba65c529d2ea0219",
        "type": "ui_chart",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "85867ccc12822d96",
        "order": 5,
        "width": 7,
        "height": 4,
        "label": "TVOC (ppb)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dbf172875ddc1bc0",
        "type": "ui_chart",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "3c09e0ee9ba3dbb5",
        "order": 5,
        "width": 7,
        "height": 4,
        "label": "eCO2 (ppm)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a892e6621dbb10cc",
        "type": "ui_chart",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "356ff7c434b524f6",
        "order": 5,
        "width": 7,
        "height": 4,
        "label": "Dust Density (µg/m3)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7c0a",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5b5abcb3c5916ba1",
        "type": "moment",
        "z": "4247dea3b30db6da",
        "name": "",
        "topic": "sensor/data",
        "input": "",
        "inputType": "msg",
        "inTz": "Asia/Kuala_Lumpur",
        "adjAmount": "0",
        "adjDir": "add",
        "format": "DD MMM YYYY HH:mm:ss",
        "locale": "\"POSIX\"",
        "output": "",
        "outputType": "msg",
        "outTz": "Asia/Kuala_Lumpur",
        "x": 790,
        "y": 740,
        "wires": [
            [
                "5d278a877ae5a83d"
            ]
        ]
    },
    {
        "id": "5620690693bef7ec",
        "type": "file",
        "z": "4247dea3b30db6da",
        "name": "",
        "filename": "C:\\Users\\zharf\\OneDrive\\Desktop\\KEE4814 THESIS 2\\IAQ\\result1.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 690,
        "y": 820,
        "wires": [
            [
                "87cbac7ccca645ad"
            ]
        ]
    },
    {
        "id": "87cbac7ccca645ad",
        "type": "debug",
        "z": "4247dea3b30db6da",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 800,
        "wires": []
    },
    {
        "id": "4e3a7002c255ae46",
        "type": "function",
        "z": "4247dea3b30db6da",
        "name": "CSV",
        "func": "var currentDate = new Date().toLocaleDateString(\"en-MY\", { timeZone: \"Asia/Kuala_Lumpur\" });\nvar currentTime = new Date().toLocaleTimeString(\"en-MY\", { timeZone: \"Asia/Kuala_Lumpur\" });\nvar temperature = msg.payload.temperature;\nvar humidity = msg.payload.humidity;\nvar dewPoint = msg.payload.dew_point;\nvar TVOC = msg.payload.TVOC;\nvar eCO2 = msg.payload.eCO2;\nvar dustValue = msg.payload.dust_density;\n\n// Create the CSV row with data\nvar csvRow = currentDate + \",\" + currentTime + \",\" + temperature + \",\" + humidity + \",\" + dewPoint + \",\" + TVOC + \",\" + eCO2 + \",\" + dustValue + \"\\n\";\n\n// Set the payload to the CSV row\nmsg.payload = csvRow;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "70c74826aa65924d",
        "type": "ui_gauge",
        "z": "4247dea3b30db6da",
        "name": "",
        "group": "64bd245e2e2a928f",
        "order": 3,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "",
        "format": "{{value}} °C",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 810,
        "y": 20,
        "wires": []
    },
    {
        "id": "42a69191e6e67ccf",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "64bd245e2e2a928f",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Average Temperature",
        "label": "Average Temperature:",
        "format": "{{msg.payload}} °C",
        "layout": "row-spread",
        "className": "",
        "x": 840,
        "y": 180,
        "wires": []
    },
    {
        "id": "59e7f70606fe2c3b",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "fed413095bcf78ad",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Average Humidity",
        "label": "Average Humidity:",
        "format": "{{msg.payload}} %",
        "layout": "row-spread",
        "className": "",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "d21ed13daa852dd0",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "85867ccc12822d96",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Average TVOC",
        "label": "Average TVOC:",
        "format": "{{msg.payload}} ppb",
        "layout": "row-spread",
        "className": "",
        "x": 820,
        "y": 440,
        "wires": []
    },
    {
        "id": "c9267f1bcc1bdbd1",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "3c09e0ee9ba3dbb5",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Average eCO2",
        "label": "Average eCO2:",
        "format": "{{msg.payload}} ppm",
        "layout": "row-spread",
        "className": "",
        "x": 820,
        "y": 480,
        "wires": []
    },
    {
        "id": "04aacaa1545441f5",
        "type": "ui_text",
        "z": "4247dea3b30db6da",
        "group": "356ff7c434b524f6",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Average Dust Density",
        "label": "Average Dust Density:",
        "format": "{{msg.payload}} µg/m3",
        "layout": "row-spread",
        "className": "",
        "x": 840,
        "y": 640,
        "wires": []
    },
    {
        "id": "4c7c1e10968e4316",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "420b8ce2a1958b91",
        "order": 1,
        "width": 8,
        "height": 1
    },
    {
        "id": "cc249b5e2eb16ffb",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "420b8ce2a1958b91",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "da3640c536a29648",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "420b8ce2a1958b91",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "98694fc29c646bdb",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "420b8ce2a1958b91",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "ba737f55a3d346a5",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "420b8ce2a1958b91",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "7143dec499370c73",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "fc6b4c029fc2d65f",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "71072bd1eb05966c",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "fc6b4c029fc2d65f",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "7bd4142cb6e4213a",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "fc6b4c029fc2d65f",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "9a6d80cb986d3efb",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "fc6b4c029fc2d65f",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "83bc48a7fa0d1e0e",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "b8caa81f34ac8890",
        "order": 1,
        "width": 8,
        "height": 1
    },
    {
        "id": "1b91d4e70cbaa95d",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "b8caa81f34ac8890",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "92d7749d9eee3cb0",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "b8caa81f34ac8890",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "3d996c1e474627b1",
        "type": "ui_spacer",
        "z": "4247dea3b30db6da",
        "name": "spacer",
        "group": "b8caa81f34ac8890",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "fed413095bcf78ad",
        "type": "ui_group",
        "name": "DHT22",
        "tab": "f43770f2caf28268",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "29176215.6781b6",
        "type": "mqtt-broker",
        "name": "Tracker.my",
        "broker": "tracker.my",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "85867ccc12822d96",
        "type": "ui_group",
        "name": "SGP30",
        "tab": "f43770f2caf28268",
        "order": 5,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c09e0ee9ba3dbb5",
        "type": "ui_group",
        "name": "SGP30",
        "tab": "f43770f2caf28268",
        "order": 6,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "356ff7c434b524f6",
        "type": "ui_group",
        "name": "GP2Y1010AU0F",
        "tab": "f43770f2caf28268",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "64bd245e2e2a928f",
        "type": "ui_group",
        "name": "DHT22",
        "tab": "f43770f2caf28268",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "420b8ce2a1958b91",
        "type": "ui_group",
        "name": " DS18B20",
        "tab": "d7c72690a972f5d7",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc6b4c029fc2d65f",
        "type": "ui_group",
        "name": "                                   DFR0300",
        "tab": "d7c72690a972f5d7",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b8caa81f34ac8890",
        "type": "ui_group",
        "name": "                                        pH",
        "tab": "d7c72690a972f5d7",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f43770f2caf28268",
        "type": "ui_tab",
        "name": "Indoor Air Quality",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d7c72690a972f5d7",
        "type": "ui_tab",
        "name": "Water Quality",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]
